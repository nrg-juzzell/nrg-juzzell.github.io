{"version":3,"file":"index.html.js","mappings":"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","sources":["webpack://de-migration/./node_modules/expandables-js/expandables.js","webpack://de-migration/./src/pages/index.js"],"sourcesContent":["export let Expandables = (() => {\n\n    let store = {};\n  \n    let Constructor = function( options ) {\n\n        let publicMethods = {};\n        let settings; \n\n        // Private\n        const expand = ( target ) => {\n            let targetHeight = target.scrollHeight;\n            publicMethods.updateState( { 'expanded' : true } );\n            target.style.height = targetHeight + 'px'; \n        } \n\n        const collapse = ( target ) => {\n            let targetHeight = target.scrollHeight;\n            publicMethods.updateState( { 'expanded' : false } );\n\n            let targetTransition = target.style.transition;\n            target.style.transition = '';\n\n            requestAnimationFrame(() => { \n                target.style.height = targetHeight + 'px';\n                target.style.transition = targetTransition;\n\n                requestAnimationFrame(() => {\n                    target.style.height = 0 + 'px';\n                })\n            });      \n        }\n\n        const collapseSiblings = ( targetGroup ) => {\n            let prevTargetContainers = targetGroup.querySelectorAll( '[data-expandable-container=\"expanded\"]' );\n            if ( prevTargetContainers.length === 0 ) return;\n\n            for (let i = 0; i < prevTargetContainers.length; i++) {\n                let prevTarget = prevTargetContainers[i].querySelector( '[data-expandable-target]' );\n\n                collapse( prevTarget );\n                prevTargetContainers[i].setAttribute( 'data-expandable-container', 'collapsed' ); \n            }\n        }\n\n        // Public\n        publicMethods.toggle = () => {\n            if( settings.container.getAttribute( 'data-expandable-container' ) == 'collapsed' ) {\n                if( settings.targetGroup !== null ) collapseSiblings( settings.targetGroup );  \n                expand( settings.target );\n                settings.container.setAttribute( 'data-expandable-container', 'expanded' ); \n            } else {\n                if( settings.targetGroup !== null ) collapseSiblings( settings.targetGroup );  \n                collapse( settings.target ); \n                settings.container.setAttribute( 'data-expandable-container', 'collapsed' );\n            }        \n        }\n        \n        publicMethods.collapse = () => {\n\n            collapse( settings.target ); \n            settings.container.setAttribute( 'data-expandable-container', 'collapsed' );\n\n        }\n\n        publicMethods.expand = () => {\n\n            expand( settings.target ); \n            settings.container.setAttribute( 'data-expandable-container', 'expanded' );\n\n        }\n\n        publicMethods.init = async ( options ) => {\n\n            if( store[ options.id ] !== undefined ) return;\n\n            settings = options; // This makes arguments available in the scope of other methods within this object\n\n            if( settings == null || settings == undefined ) { console.error( 'Expandables Plugin, settings not provided upon initialization' ); return; } \n\n            let trigger      = settings.trigger;\n            let triggerEvent = trigger.getAttribute( 'data-expandable-trigger' ); \n\n            triggerEvent = ( triggerEvent !== undefined && triggerEvent !== '' ) ? triggerEvent : 'click'; \n            settings.triggerEvent = triggerEvent;\n\n            await trigger.setAttribute( 'data-expandable-id', settings.id );\n\n            if( settings.override === 'true' ) {\n\n                try {\n                    settings.callback = ( event ) => {\n                        if( event.target.getAttribute( 'data-expandable-id' ) === trigger.dataset.expandableId ) {  \n                            let thisExpandableSettings = Expandables.getExpandable( settings.id ).getSettings();  \n                            window[ thisExpandableSettings.customCallback ]( event );\n                        }\n                    }; \n\n                    window.addEventListener( triggerEvent, settings.callback );                 \n                } catch( error ) {\n                    console.error( 'Expandables Plugin, setting ' + settings.id + ' expandable custom callback failed: ' + error.message );\n                }\n\n            } else {\n \n                settings.callback = ( event ) => {  \n                    if( event.target.getAttribute( 'data-expandable-id' ) === trigger.dataset.expandableId ) {\n                        Expandables.getExpandable( settings.id ).toggle();\n                    }\n                } \n\n                window.addEventListener( triggerEvent, settings.callback ); \n\n            }\n             \n            if( settings.targetGroup === null ) {\n\n                settings.target.addEventListener( 'transitionend', event => {    \n \n                    if( settings.expanded === true  ) { \n                        settings.target.style.height = 'auto';\n                    }\n                    \n                });\n\n            }\n\n        };\n\n        publicMethods.updateState = ( state ) => {\n            \n            for( let setting in state ) {\n                settings[ setting ] = state[ setting ];\n            }\n\n        }\n        \n        publicMethods.getSettings = () => {\n            return settings;\n        }\n\n        publicMethods.isExpanded = () => {\n            return settings.expanded;\n        }\n\n        // Initialize plugin\n        publicMethods.init( options );\n        return publicMethods;\n\n    }\n\n    const collapseAll = ( containerSelector = 'body' ) => { \n         \n        let expandables = Expandables.getExpandables(); \n        \n        for( let key in expandables ) {\n\n            const expandable = expandables[ key ];\n            const expandableSettings = expandables[ key ].getSettings();\n\n            if( expandable.getSettings().targetGroup !== null ) { return; }\n            let trigger = document.querySelector( containerSelector ).querySelector( \"[data-expandable-id='\" + expandableSettings.id + \"']\" ); \n\n            if( trigger === undefined ) { return; }\n            if( expandableSettings.expanded ) { expandable.collapse(); }\n           \n        }\n\n    } \n\n    const expandAll = ( containerSelector = 'body' ) => { \n\n        let expandables = Expandables.getExpandables(); \n        \n        for( let key in expandables ) {\n\n            const expandable = expandables[ key ];\n            const expandableSettings = expandables[ key ].getSettings();\n\n            if( expandable.getSettings().targetGroup !== null ) { return; }\n            let trigger = document.querySelector( containerSelector ).querySelector( \"[data-expandable-id='\" + expandableSettings.id + \"']\" ); \n\n            if( trigger === undefined ) { return; }\n            if( !expandableSettings.expanded ) { expandable.expand(); }\n           \n        } \n\n    }\n\n    const setExpandable = ( name, obj ) => {\n        if( store[ name ] !== undefined ) return;\n        store[ name ] = obj;\n    }\n\n    const getExpandable = ( name ) => {\n        return store[ name ];\n    }\n\t\n    const getExpandables = () => {\n        return store;\n    }\t\n\n    const destroyExpandables = () => { \n        for( const expandableId in store ) {\n            let settings = getExpandable( expandableId ).getSettings(); \n            let callbackName = settings.callback;  \n            let triggerEvent = settings.triggerEvent; \n            window.removeEventListener( triggerEvent, callbackName );\n        }\n        store = {};\n    }\n\n    const registerExpandable = function( expandable, iterator ) {\n\n        let expandableTarget   = expandable.querySelector( '[data-expandable-target]' );\n        let expandableName     = ( expandableTarget.getAttribute( 'data-expandable-target' ) !== '' ) ? expandableTarget.getAttribute( 'data-expandable-target' ) : 'expandable_' + iterator;\n        let expandableTrigger  = expandable.querySelector( '[data-expandable-trigger]' );\n        let expandableGroup    = findAncestor( expandable, '[data-expandable-group]' );\n        let isExpanded         = ( expandable.getAttribute( 'data-expandable-container' ) == 'collapsed' ) ? false : true;\n        let expandableOverride = expandable.getAttribute( 'data-expandable-override' );\n        let expandableCallback = null;\n        let callbackName;             \n    \n        if( expandableOverride === \"true\" ) {\n            callbackName = expandable.getAttribute( 'data-expandable-callback' );  \n            expandableCallback = ( callbackName === undefined ) ? null : callbackName; // string, name of function to call\n            if( expandableCallback == null ) { console.warn( 'Expandables Plugin did not detect custom callback for override, Node:', expandable ); } \n        }\n    \n        if( expandableTarget == null ) { console.warn( 'Expandables Plugin did not detect target, Node:', expandable ); }\n        if( expandableTrigger == null ) { console.warn( 'Expandables Plugin did not detect trigger, Node:', expandable ) ; }\n    \n        this.storeExpandable( \n            expandableName,\n            new Expandables.build({\n                id               : expandableName,\n                container        : expandable, \n                trigger          : expandableTrigger, \n                target           : expandableTarget, \n                targetGroup      : expandableGroup, \n                override         : expandableOverride, \n                customCallback   : expandableCallback, \n                expanded         : isExpanded\n            })\n        );  \n            \n        function findAncestor(el, sel) {\n            while ((el = el.parentElement) && !((el.matches || el.matchesSelector).call(el,sel)));\n            return el;\n        }\n    \n    }\n\n    return { \n        build              : Constructor, \n        registerExpandable : registerExpandable, \n        storeExpandable    : setExpandable, \n        getExpandables     : getExpandables, \n        getExpandable      : getExpandable, \n        destroyExpandables : destroyExpandables, \n        collapseAll        : collapseAll, \n        expandAll          : expandAll\n    };   \n  \n})();\n  \nexport const initExpandables = function() {\n    \n    let expandables = document.querySelectorAll( '[data-expandable-container]' );\n    if( expandables == null ) return; \n\n    for( let i = 0; i < expandables.length; i++ ) {\n        Expandables.registerExpandable( expandables[ i ], i );\n    }\n\n}\n","import '../styles/main.scss'; \nimport {Expandables, initExpandables} from 'expandables-js/expandables.js';\n\n// Initialize Plugin\ninitExpandables(); "],"names":["Expandables","store","getExpandable","name","build","options","settings","publicMethods","expand","target","targetHeight","scrollHeight","updateState","style","height","collapse","targetTransition","transition","requestAnimationFrame","collapseSiblings","targetGroup","prevTargetContainers","querySelectorAll","length","i","prevTarget","querySelector","setAttribute","toggle","container","getAttribute","init","async","undefined","id","console","error","trigger","triggerEvent","override","callback","event","dataset","expandableId","thisExpandableSettings","getSettings","window","customCallback","addEventListener","message","expanded","state","setting","isExpanded","registerExpandable","expandable","iterator","callbackName","expandableTarget","expandableName","expandableTrigger","expandableGroup","el","sel","parentElement","matches","matchesSelector","call","findAncestor","expandableOverride","expandableCallback","warn","this","storeExpandable","obj","getExpandables","destroyExpandables","removeEventListener","collapseAll","containerSelector","expandables","key","expandableSettings","document","expandAll","initExpandables"],"sourceRoot":""}